export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      // Participants table - links to auth users
      participants: {
        Row: {
          id: string
          user_id: string
          participant_code: string
          agreement_accepted: boolean
          agreement_accepted_at: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          participant_code?: string // Auto-generated by trigger if not provided
          agreement_accepted?: boolean
          agreement_accepted_at?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          participant_code?: string
          agreement_accepted?: boolean
          agreement_accepted_at?: string | null
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "participants_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }

      // Profiles table - stores user data, linked to auth.users via foreign key
      profiles: {
        Row: {
          id: string // Must match auth.users.id
          name: string
          email: string
          date_of_birth: string
          gender: 'male' | 'female'
          job_title: string
          organisation: string // British spelling
          role: 'participant' | 'operator' | 'admin'
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string // Must be auth user ID
          name: string
          email: string
          date_of_birth: string
          gender: 'male' | 'female'
          job_title: string
          organisation: string
          role?: 'participant' | 'operator' | 'admin'
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          name?: string
          email?: string
          date_of_birth?: string
          gender?: 'male' | 'female'
          job_title?: string
          organisation?: string
          role?: 'participant' | 'operator' | 'admin'
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            isOneToOne: true
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }


      // Stations table
      stations: {
        Row: {
          id: string
          name: string
          description: string
          station_type: StationType
          icon_name: string
          color_class: string
          is_active: boolean
          sort_order: number
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          name: string
          description: string
          station_type: StationType
          icon_name?: string
          color_class?: string
          is_active?: boolean
          sort_order?: number
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          name?: string
          description?: string
          station_type?: StationType
          icon_name?: string
          color_class?: string
          is_active?: boolean
          sort_order?: number
          created_at?: string
          updated_at?: string
        }
        Relationships: []
      }

      // Station results table - stores actual measurement data
      station_results: {
        Row: {
          id: string
          participant_id: string
          station_id: string
          station_type: StationType
          measurements: Json // Stores the actual measurement data
          recorded_by: string // user_id of the operator who recorded this
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          participant_id: string
          station_id: string
          station_type: StationType
          measurements: Json
          recorded_by: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          participant_id?: string
          station_id?: string
          station_type?: StationType
          measurements?: Json
          recorded_by?: string
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "station_results_participant_id_fkey"
            columns: ["participant_id"]
            isOneToOne: false
            referencedRelation: "participants"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "station_results_station_id_fkey"
            columns: ["station_id"]
            isOneToOne: false
            referencedRelation: "stations"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "station_results_recorded_by_fkey"
            columns: ["recorded_by"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }

      // Station operators table - manages which operators can use which stations
      station_operators: {
        Row: {
          id: string
          user_id: string
          station_id: string
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          station_id: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          station_id?: string
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "station_operators_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "station_operators_station_id_fkey"
            columns: ["station_id"]
            isOneToOne: false
            referencedRelation: "stations"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      get_user_role: {
        Args: {
          user_id: string
        }
        Returns: 'participant' | 'operator' | 'admin'
      }
      authorize_role: {
        Args: {
          required_roles: ('participant' | 'operator' | 'admin')[]
        }
        Returns: boolean
      }
      set_user_role: {
        Args: {
          target_user_id: string
          new_role: 'participant' | 'operator' | 'admin'
        }
        Returns: boolean
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Helper types
export type ParticipantProfile = Database['public']['Tables']['profiles']['Row']
export type ParticipantProfileInsert = Database['public']['Tables']['profiles']['Insert']
export type ParticipantProfileUpdate = Database['public']['Tables']['profiles']['Update']

export type Participant = Database['public']['Tables']['participants']['Row']
export type ParticipantInsert = Database['public']['Tables']['participants']['Insert']
export type ParticipantUpdate = Database['public']['Tables']['participants']['Update']

export type Gender = 'male' | 'female'
export type UserRole = 'participant' | 'operator' | 'admin'

// Station operators types
export type StationOperator = Database['public']['Tables']['station_operators']['Row']
export type StationOperatorInsert = Database['public']['Tables']['station_operators']['Insert']
export type StationOperatorUpdate = Database['public']['Tables']['station_operators']['Update']

// Station types
export type Station = Database['public']['Tables']['stations']['Row']
export type StationInsert = Database['public']['Tables']['stations']['Insert']
export type StationUpdate = Database['public']['Tables']['stations']['Update']

// Station result types
export type StationResult = Database['public']['Tables']['station_results']['Row']
export type StationResultInsert = Database['public']['Tables']['station_results']['Insert']
export type StationResultUpdate = Database['public']['Tables']['station_results']['Update']

// Station and measurement types
export type StationType = 'balance' | 'breath' | 'grip' | 'health';
export type Grade = 'Above Average' | 'Average' | 'Bad' | null;

export interface LeaderboardEntry {
  id: string;
  participant_code: string;
  full_name: string;
  organization: string | null;
  gender: 'male' | 'female' | 'other';
  score_balance: number | null;
  score_breath: number | null;
  score_grip: number | null;
  score_health: number | null;
  total_score: number | null;
  grade: Grade;
  created_at: string;
  rank: number;
}

export interface BalanceMeasurement {
  balance_seconds: number;
}

export interface BreathMeasurement {
  breath_seconds: number;
}

export interface GripMeasurement {
  grip_left_kg: number;
  grip_right_kg: number;
}

export interface HealthMeasurement {
  bp_systolic: number;
  bp_diastolic: number;
  pulse: number;
  bmi: number;
  muscle_pct: number;
  fat_pct: number;
  spo2: number;
}

// For backward compatibility
export type Profile = ParticipantProfile

// Form data interface for signup
export interface SignupFormData {
  fullName: string
  dateOfBirth: string
  gender: Gender
  jobTitle: string
  organization: string // American spelling in forms
  email?: string | null
  phone?: string | null
  consentWellness: boolean
  consentLiability: boolean
  consentData: boolean
  password?: string
}